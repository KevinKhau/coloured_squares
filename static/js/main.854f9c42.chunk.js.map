{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","localSquares","localStorage","getItem","squares","split","Array","state","colors","map","getRandomColor","className","this","color","index","style","setStyle","onClick","stackColor","i","backgroundColor","isDark","setState","slice","length","setItem","Math","floor","random","c","substring","rgb","parseInt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAwEeA,E,kDApEX,WAAYC,GAAQ,IAAD,sBACf,IAAMC,EAAeC,aAAaC,QAAS,WACrCC,EAAUH,EAAeA,EAAaI,MAAM,KAAtB,YAAiCC,MAAM,KAFpD,OAGf,cAAMN,IACDO,MAAQ,CACTC,OAAQ,YAAIF,MAAM,IAAIG,IAAI,EAAKC,gBAC/BN,WANW,E,0CAUnB,WAAU,IAAD,OACL,OACI,sBAAKO,UAAU,MAAf,UACKC,KAAKL,MAAMC,OAAOC,KAAI,SAACI,EAAOC,GAAR,OACnB,qBAAKH,UAAU,SAAf,SACI,yBAAQI,MAAO,EAAKC,SAASH,GACrBI,QAAS,kBAAM,EAAKC,WAAWL,IADvC,uBAEeA,MAHUC,MAOhCF,KAAKL,MAAMH,QAAQK,KAAI,SAACI,EAAOM,GAAR,OACpB,qBAAKR,UAAU,SAASI,MAAO,EAAKC,SAASH,GAA7C,SACI,sCADsDM,W,sBAQ1E,SAASN,GACL,GAAKA,EAAL,CACA,IAAME,EAAQ,CAACK,gBAAiBP,GAIhC,OAHID,KAAKS,OAAOR,KACZE,EAAMF,MAAQ,SAEXE,K,wBAGX,SAAWF,GACPD,KAAKU,SAAS,CAAClB,QAAQ,CAAES,GAAH,mBAAaD,KAAKL,MAAMH,QAAQmB,MAAM,EAAGX,KAAKL,MAAMH,QAAQoB,OAAS,OAC3FtB,aAAauB,QAAQ,UAAWb,KAAKL,MAAMH,W,4BAG/C,WAGI,IAFA,IACIS,EAAQ,IACHM,EAAI,EAAGA,EAAI,EAAGA,IACnBN,GAHY,mBAGKa,KAAKC,MAAsB,GAAhBD,KAAKE,WAErC,OAAOf,I,oBAGX,SAAOA,GACH,IAAMgB,EAAIhB,EAAMiB,UAAU,GACpBC,EAAMC,SAASH,EAAG,IAOxB,GAFa,OAJFE,GAAO,GAAM,KAIE,OAHfA,GAAQ,EAAK,KAGe,OAF5BA,GAAQ,EAAK,KAIb,GACP,OAAO,M,GAhEDE,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.854f9c42.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        const localSquares = localStorage.getItem( 'squares' );\r\n        const squares = localSquares ? localSquares.split(',') : [...Array(10)];\r\n        super(props);\r\n        this.state = {\r\n            colors: [...Array(4)].map(this.getRandomColor),\r\n            squares\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                {this.state.colors.map((color, index) =>\r\n                    <div className=\"corner\" key={index}>\r\n                        <button style={this.setStyle(color)}\r\n                                onClick={() => this.stackColor(color)}>\r\n                            Click me: {color}\r\n                        </button>\r\n                    </div>\r\n                )}\r\n                {this.state.squares.map((color, i) =>\r\n                    <div className=\"square\" style={this.setStyle(color)} key={i}>\r\n                        <span>*</span>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setStyle(color) {\r\n        if (!color) return;\r\n        const style = {backgroundColor: color};\r\n        if (this.isDark(color)) {\r\n            style.color = 'white';\r\n        }\r\n        return style;\r\n    }\r\n\r\n    stackColor(color) {\r\n        this.setState({squares: [color, ...this.state.squares.slice(0, this.state.squares.length - 1)]});\r\n        localStorage.setItem('squares', this.state.squares);\r\n    }\r\n\r\n    getRandomColor() {\r\n        const letters = '0123456789ABCDEF';\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n    isDark(color) {\r\n        const c = color.substring(1);      // strip #\r\n        const rgb = parseInt(c, 16);   // convert rrggbb to decimal\r\n        const r = (rgb >> 16) & 0xff;  // extract red\r\n        const g = (rgb >>  8) & 0xff;  // extract green\r\n        const b = (rgb >>  0) & 0xff;  // extract blue\r\n\r\n        const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b; // per ITU-R BT.709\r\n\r\n        if (luma < 40) {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}